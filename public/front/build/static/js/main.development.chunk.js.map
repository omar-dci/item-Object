{"version":3,"sources":["components/ToDoItems/toDoItems.js","components/AddItems/addItem.jsx","App.js","serviceWorker.js","index.js"],"names":["ToDoItems","props","items","deleteItem","listItems","length","map","item","key","id","className","description","onClick","AddItems","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","console","log","sendItem","name","then","data","addItem","alert","catch","error","type","placeholder","onChange","this","Component","App","show","postData","url","fetch","method","mode","cache","credentials","headers","redirect","referrer","body","JSON","stringify","response","json","filter","Math","random","push","hide","showItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.development.chunk.js","sourcesContent":["import React from 'react'\n\nconst ToDoItems = (props)=>{\nconst items = props.items;\nconst deleteItem=props.deleteItem;\nlet length= items.length;\n// if there is no items to show then show Pargraph\nconst listItems = length ?\n( items.map(item => {\n    return(\n<div key={item.id}>\n<span className=\"item\">{item.item}</span>\n<span className=\"descriptionAction\">{item.description}</span>\n<span className=\"action icon\" onClick={()=> deleteItem(item.id)}>&times;</span> \n\n\n\n    </div>\n            )\n\n}))\n//No items in the Array\n    :(<p>There is No Items to Show</p>)\n    return(\n<div className=\"ListItems\">\n\n    <div>\n    <span className=\"item title\">Item name</span>\n    <span className=\"description title\">Description</span>\n    <span className=\"action title\">Action</span>\n    </div>\n\n{listItems}\n</div>\n    )\n}\n\nexport default ToDoItems;","import React,{Component} from 'react'\n\n\nclass AddItems extends Component{\n   \n    state={\n        item:'',\n        description:''\n    }\nhandleChange=(e)=>{\n        this.setState({\n        [e.target.id]:e.target.value\n    })\n}\n\nhandleSubmit=(e)=>{\ne.preventDefault();\nconsole.log(this.state)\nif(this.state.description===''|| this.state.item===''){\n    return false\n}else{\n    // this.props.addItem(this.state)\n    //     this.setState({\n    //         name:'',\n    //         description:''\n    //     })\n    this.props.sendItem('/',{name:this.state.item,description:this.state.description}).then(data=>{\n        if(data == 1){\n            this.props.addItem(this.state)\n        this.setState({\n            item:'',\n            description:''\n        })\n        }else{\n           alert('server error'); \n        }\n        \n    }).catch(error=>{\n        alert('server error'); \n        console.log(error)\n    })\n\n}\n}\n\n    render(){\n        return(\n            <div>\n                <form >\n                    <input type=\"text\" placeholder=\"Enter Name...\" id=\"item\" onChange={this.handleChange} value = {this.state.item}/>\n                    <input type=\"text\" placeholder=\"Enter description..\" id=\"description\" onChange={this.handleChange}\n                        value= {this.state.description}\n                    />\n                    <button onClick={this.handleSubmit}  >add</button>\n                </form>\n            </div>\n        )\n    }\n\n\n}\nexport default AddItems;","import React,{Component} from 'react';\nimport ToDoItems from './components/ToDoItems/toDoItems';\nimport AddItems from './components/AddItems/addItem';\n\n\nclass App extends Component {\n  state= {\n    items : [\n      {id:1,item:'Mohamad',description:26},\n      {id:2,item:'Alex',description:20},\n      {id:3,item:'Nour',description:29}\n    ],\n    show:false,\n    postData : (url, data)=> {\n      return fetch(url, {\n          method: 'POST', // GET, PUT, DELETE, etc\n          mode: 'cors', // no-cors, same-origin\n          cache: 'no-cache', //default, reload, force-cache\n          credentials: 'same-origin', // include, same-origin, omit\n          headers: {\n              'Content-Type': 'application/json'\n              // if you are using GET you need to use this option\n              // content-Type': 'applicatoin/X-www-form-urlencoded'\n          },\n          redirect: 'follow', // manual, error,\n          referrer: 'no-referrer', // client\n          body: JSON.stringify(data),\n      }).then((response) => {\n          return response.json();\n      });\n  }\n  }\n\n\n  deleteItem = (id)=>{\nlet items=this.state.items.filter(item =>{\n  \n  return( item.id !== id);\n  \n});\nthis.setState({items})\n  }\n  \n  addItem=(item)=>{\n    item.id=Math.random();\n    let items = this.state.items;\n    items.push(item);\n    \n    this.setState({\n      items\n    })\n  }\n   hide=()=>{\n if(this.state.show){\nthis.setState({\n  show:false\n})\n  }else{\n    this.state.postData('/getdata',{}).then(data=>{\n      this.setState({\n        items:data,\n        show:true\n      })\n    }).catch(error=>{\n      this.setState({\n        show:true\n      })\n    });\n    \n  }\n  }\n  render(){\n    if(this.state.show){\n\n    \n    return(\n    <div className=\"App container\">\n      <h1 className=\"text-center\">Items</h1>\n      <ToDoItems items={this.state.items} deleteItem={this.deleteItem} showItem={true} />\n      <AddItems addItem={this.addItem} sendItem={this.state.postData}  />\n      <button onClick={()=>this.hide()}>Show/Hide</button>\n    </div>\n    \n    )}else{\n      return(\n        <div className=\"App container\">\n      <h1 className=\"text-center\">Items</h1>\n      <AddItems addItem={this.addItem} sendItem={this.state.postData}/>\n      <button onClick={()=>this.hide()}>Show/Hide</button>\n</div>\n      )}\n  \n  };\n}\n\nexport default App;\n\n//sendItem={this.postData}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}